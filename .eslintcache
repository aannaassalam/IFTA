[{"C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\index.js":"1","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\reportWebVitals.js":"2","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\StateProvider.js":"3","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\Reducer.js":"4","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\App.js":"5","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Voting\\Voting.js":"6","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Vote\\Vote.js":"7","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Home\\Home.js":"8","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Footer\\Footer.js":"9","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Navbar\\Navbar.js":"10","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Home\\Category\\Category.js":"11","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Home\\YTVideo\\YTVideo.js":"12","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\MovieGrid\\MovieGrid.js":"13","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\LoginModal\\LoginModal.js":"14","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Home\\GridImages\\GridImages.js":"15","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Map\\Map.js":"16","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Home\\GridImages\\Grid.js":"17","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Map\\LinearGradient.js":"18","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\MovieGrid\\Comment.js":"19","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\MovieGrid\\ExpiredGrid\\ExpiredGrid.js":"20"},{"size":804,"mtime":1630948716902,"results":"21","hashOfConfig":"22"},{"size":375,"mtime":1630931526055,"results":"23","hashOfConfig":"22"},{"size":375,"mtime":1630931525243,"results":"24","hashOfConfig":"22"},{"size":2246,"mtime":1630931525243,"results":"25","hashOfConfig":"22"},{"size":2659,"mtime":1630948716874,"results":"26","hashOfConfig":"22"},{"size":2223,"mtime":1630931525243,"results":"27","hashOfConfig":"22"},{"size":2081,"mtime":1630931525243,"results":"28","hashOfConfig":"22"},{"size":4630,"mtime":1630948716876,"results":"29","hashOfConfig":"22"},{"size":302,"mtime":1630931525243,"results":"30","hashOfConfig":"22"},{"size":5588,"mtime":1630931525243,"results":"31","hashOfConfig":"22"},{"size":1417,"mtime":1630931525243,"results":"32","hashOfConfig":"22"},{"size":294,"mtime":1630931525243,"results":"33","hashOfConfig":"22"},{"size":17602,"mtime":1630931525243,"results":"34","hashOfConfig":"22"},{"size":9714,"mtime":1631006098742,"results":"35","hashOfConfig":"22"},{"size":3124,"mtime":1630931525243,"results":"36","hashOfConfig":"22"},{"size":7757,"mtime":1630948716878,"results":"37","hashOfConfig":"22"},{"size":3209,"mtime":1630931525243,"results":"38","hashOfConfig":"22"},{"size":1069,"mtime":1630931525243,"results":"39","hashOfConfig":"22"},{"size":3982,"mtime":1630931525243,"results":"40","hashOfConfig":"22"},{"size":2276,"mtime":1630931525243,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"3v2zjs",{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":2,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\index.js",[],["93","94"],"C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\reportWebVitals.js",[],"C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\StateProvider.js",[],"C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\Reducer.js",[],"C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\App.js",["95"],"import \"./App.css\";\r\nimport { Route, Switch, HashRouter } from \"react-router-dom\";\r\nimport Home from \"./components/Home/Home\";\r\nimport Voting from \"./components/Voting/Voting\";\r\nimport Bollywood from \"./components/Vote/Vote\";\r\nimport { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { actionTypes } from \"./Reducer\";\r\nimport \"./components/Vote/Vote.css\";\r\nimport \"./components/Voting/Voting.css\";\r\n\r\nfunction App() {\r\n  const [{ userIdentification }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    getAwards();\r\n  }, [userIdentification]);\r\n\r\n  const getAwards = () => {\r\n    if (userIdentification) {\r\n      const authToken = localStorage.getItem(\"authToken\").split(\" \")[1];\r\n      axios\r\n        .get(\r\n          \"/show/fetchCategories/logedIn?showId=602a7e3c14367b662559c85f\",\r\n          {\r\n            headers: { Authorization: `Bearer ${authToken}` },\r\n          }\r\n        )\r\n        .then((res) => {\r\n\r\n          dispatch({\r\n            type: actionTypes.SET_AWARDS,\r\n            awards: res.data.payload.awards,\r\n          });\r\n\r\n          dispatch({\r\n            type: actionTypes.SET_EXPIREDandTOTALVOTE,\r\n            expired: res.data.payload.show.isExpired,\r\n            totalVotes: res.data.payload.show.voteCount,\r\n            expiryDate: res.data.payload.show.lifeSpan\r\n          });\r\n\r\n\r\n          dispatch({\r\n            type: actionTypes.SET_STATE_VOTE_DATA,\r\n            voteData: res.data.payload.voteData\r\n          });\r\n\r\n        })\r\n        .catch((err) => alert(err));\r\n    } else {\r\n      axios\r\n        .get(\r\n          \"/show/fetchCategories?showId=602a7e3c14367b662559c85f\"\r\n        )\r\n        .then((res) => {\r\n          dispatch({\r\n            type: actionTypes.SET_AWARDS,\r\n            awards: res.data.payload.awards,\r\n          });\r\n\r\n          dispatch({\r\n            type: actionTypes.SET_EXPIREDandTOTALVOTE,\r\n            expired: res.data.payload.show.isExpired,\r\n            totalVotes: res.data.payload.show.voteCount,\r\n            expiryDate: res.data.payload.show.lifeSpan\r\n          });\r\n\r\n\r\n          dispatch({\r\n            type: actionTypes.SET_STATE_VOTE_DATA,\r\n            voteData: res.data.payload.voteData\r\n          });\r\n        })\r\n    }\r\n  };\r\n\r\n  return (\r\n    <HashRouter>\r\n      <div className=\"app\">\r\n\r\n        <Switch>\r\n          <Route path=\"/voting\" component={Voting} />\r\n          <Route path=\"/vote/:award\" component={Bollywood} />\r\n          <Route path=\"/\" component={Home} />\r\n        </Switch>\r\n        <div class=\"animation-wrapper\">\r\n        </div>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Voting\\Voting.js",["96","97","98"],"import React, { useCallback, useEffect } from \"react\";\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport logo1 from \"../../images/sc2.jpg\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport YTVideo from \"../Home/YTVideo/YTVideo\";\r\nimport Category from \"../Home/Category/Category\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport { actionTypes } from \"../../Reducer\";\r\nimport LoginModal from \"../LoginModal/LoginModal\";\r\nimport CountUp from \"react-countup\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Voting = () => {\r\n  const [{ userIdentification, totalVotes , userName }, dispatch] = useStateValue();\r\n  useEffect(() => {\r\n    if (userIdentification !== null) {\r\n      const authToken = localStorage.getItem(\"authToken\").split(\" \")[1];\r\n      dispatch({\r\n        type: actionTypes.SET_TOKEN,\r\n        token: authToken,\r\n      });\r\n    }\r\n  }, [userIdentification]);\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className=\"voting\">\r\n      <div className=\"voting__login\">\r\n        <div>\r\n          <h2 style={{color:'gold'}}>\r\n            Total votes: <CountUp end={totalVotes} duration={2.75} />\r\n          </h2>\r\n          <div style={{ padding: '10px', width: 'max-content', position: 'relative', paddingTop: '10px'}}>\r\n            <span style={{ fontFamily: 'Oswald, sans-serif', position: 'relative', paddingTop: '10px' }}>{userIdentification ? <AccountCircleIcon style={{ fontSize: '2rem' }} /> : null} </span>\r\n            <span style={{ fontFamily: 'Oswald, sans-serif', fontSize: '0.8rem' , verticalAlign:'top' }}>{userIdentification ? userName : null}</span>\r\n          </div>\r\n        </div>\r\n        <div style={{ display: 'flex', flexDirection: 'row', width: 'min-content' }}>\r\n          <LoginModal />\r\n        </div>\r\n      </div>\r\n      <img className=\"top-img\" src={logo1} alt=\"iifa-logo\" />\r\n      <Navbar />\r\n      {/* <img className=\"bottom-img\" src={logo2} alt=\"iifa-logo\" /> */}\r\n      <div className=\"voting__video\">\r\n        <YTVideo />\r\n      </div>\r\n      <div className=\"voting__category\">\r\n        <Category />\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Voting;\r\n","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Vote\\Vote.js",["99","100","101","102","103"],"import React, { useEffect, useState } from \"react\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport logo1 from \"../../images/sc2.jpg\";\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport MovieGrid from \"../MovieGrid/MovieGrid\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport { withRouter, useHistory } from \"react-router-dom\";\r\nimport CountUp from \"react-countup\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport LoginModal from \"../LoginModal/LoginModal\";\r\n\r\nconst Vote = ({ match }) => {\r\n  const [{ totalVotes ,userIdentification , userName}, dispatch] = useStateValue();\r\n\r\n  useEffect(() => window.scrollTo(0, 0), []);\r\n  const award = match.params.award;\r\n  const history = useHistory();\r\n  const goToHome = () => {\r\n    history.push(\"/\")\r\n  }\r\n  const goToBack = () => {\r\n    history.push(\"/voting\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"vote\">\r\n      <div className=\"voting__login\">\r\n        <div>\r\n          <h2 style={{color:'gold'}}>\r\n            Total votes: <CountUp end={totalVotes} duration={2.75} />\r\n          </h2>\r\n          <div style={{ padding: '10px', width: 'max-content', position: 'relative', padding: '10px', paddingRight: '50px' }} className=\"userName\">\r\n            <span style={{ fontFamily: 'Oswald, sans-serif', position: 'relative'}}>{userIdentification ? <AccountCircleIcon/> : null}</span>\r\n            <span style={{ fontFamily: 'Oswald, sans-serif',verticalAlign:'top' }}>{userIdentification ? userName : null}</span>\r\n          </div>\r\n        </div>\r\n        <div style={{ display: 'flex', flexDirection: 'row', width: 'min-content' }}>\r\n          {/* <div className=\"box\">\r\n            <button className=\"modal__btn\" onClick={()=>goToBack()}>Back</button>\r\n          </div> */}\r\n          <LoginModal />\r\n        </div>\r\n      </div>\r\n      <img className=\"top-img\" src={logo1} alt=\"iifa-logo\" />\r\n      <Navbar />\r\n      {/* <img className=\"bottom-img\" src={logo2} alt=\"iifa-logo\" /> */}\r\n      <MovieGrid award={award} />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Vote);\r\n","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Home\\Home.js",["104","105","106","107","108","109"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./Home.css\";\r\nimport YTVideo from \"./YTVideo/YTVideo\";\r\nimport GridImages from \"./GridImages/GridImages\";\r\nimport Category from \"./Category/Category\";\r\nimport { Link } from 'react-router-dom'\r\nimport facebook from \"../../images/fb.png\";\r\nimport insta from \"../../images/insta.png\";\r\nimport gif1_small from \"../../images/Ifta_Trophy.png\";\r\nimport gif1_large from \"../../images/Ifta_Trophy.png\";\r\nimport gif2_small from \"../../images/ifta 2021_medal.png\";\r\nimport gif2_large from \"../../images/ifta 2021_medal.png\";\r\nimport ikickLogo from '../../images/ikick-logo.png'\r\nimport Map from '../Map/Map'\r\nimport { useStateValue } from \"../../StateProvider\";\r\n\r\nconst Home = () => {\r\n  const catRef = useRef(null);\r\n  const [gif1, setGif1] = useState(gif1_small);\r\n  const [gif2, setGif2] = useState(gif2_small);\r\n  const [{ stateVoteData }, dispatch] = useStateValue();\r\n  let loaded1 = false;\r\n  let loaded2 = false;\r\n  useEffect(() => {\r\n    if (!loaded1) {\r\n      let img1 = new Image();\r\n      img1.onload = () => {\r\n        loaded1 = true;\r\n        setGif1(gif1_large);\r\n      }\r\n      img1.src = gif1_large;\r\n    }\r\n\r\n    if (!loaded2) {\r\n      let img2 = new Image();\r\n      img2.onload = () => {\r\n        loaded2 = true;\r\n        setGif2(gif2_large);\r\n      }\r\n      img2.src = gif2_large;\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className=\"home\">\r\n\r\n      <section className=\"home__first\">\r\n        <img src={gif1} alt=\"iifa-award\" />\r\n        <div id=\"middle-div\">\r\n          <img src={ikickLogo} style={{ width: '40%', marginBottom: '15px' }} />\r\n          <p style={{ marginBottom: '5px', fontStyle: \"italic\", fontFamily: \"Crimson Text, serif\", fontSize: '1.1rem' }}>presents</p>\r\n          <div style={{ padding: '20px' }}><h3 style={{ color: 'gold', textAlign: 'center' }}>India’s 1st People’s Choice Award</h3></div>\r\n          <h1>IFTA</h1>\r\n          <Link to={{ pathname: \"/voting\" }}><button style={{ backgroundColor: \"#1C1C41\", fontSize: '1.03rem' }}><b>VOTE</b></button></Link>\r\n          <div className=\"slide-top\" style={{ height: '150px' }}>\r\n            <h4 className=\"tagline\">VOTE</h4>\r\n            <h4 className=\"tagline\">and</h4>\r\n            <h4>DECIDE THE WINNER</h4>\r\n          </div>\r\n        </div>\r\n        <div>\r\n        <img src={gif2} alt=\"iifa-award\" id=\"ifta_medal\"/>\r\n        </div>\r\n      </section>\r\n      <section className=\"home__second\">\r\n        <YTVideo />\r\n      </section>\r\n      <section ref={catRef} className=\"home__fourth\">\r\n        <Category show />\r\n      </section>\r\n      <section className=\"home__third\">\r\n        <div style={{ margin: 'auto', 'textAlign': 'center' }}>\r\n          <h1 style={{ 'textDecoration': 'underline' }}><b>Nominees for IFTA 2020-21</b> </h1>\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <GridImages />\r\n        </div>\r\n        {/* <div>\r\n          <GridImages secId />\r\n        </div> */}\r\n      </section>\r\n      <section >\r\n        <div style={{ margin: 'auto', 'textAlign': 'center' }}>\r\n          <h2 style={{ 'textDecoration': 'underline' }} id=\"state-heading\"><b>State-wise Vote Distribution</b> </h2>\r\n          <Map mapData={stateVoteData} />\r\n        </div>\r\n      </section>\r\n      <footer className=\"home__footer\">\r\n        <div className=\"home__footerLeft\">\r\n          <h1>IFTA</h1>\r\n          <div>\r\n            <div>\r\n              <p>Copyright © 2021 All rights reserved | This website is made by iKick Enterprise LLP</p>\r\n              <p style={{ paddingTop: '20px' }}>\r\n                <div style={{ color: 'white', display: 'inline-block', verticalAlign: 'top' }}>Address:</div><br />\r\n                <div style={{ display: 'inline-block' }}>Plot Number 463, Sector 38,<br /> Gurugram, Haryana 122022</div>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"home__footerRight\">\r\n          <h1>Connect with us:</h1>\r\n          <div>\r\n            <a href=\"https://www.facebook.com/ifta.official\" target='_blank'><img src={facebook} alt=\"facebook\" /></a>\r\n            <a href=\"https://www.instagram.com/ifta.official/\" target='_blank'><img src={insta} alt=\"instagram\" /></a>\r\n          </div>\r\n          <div>\r\n            <p>\r\n              Write to us:<br />\r\n              <span style={{ color: '#bbb' }}>mailtoifta@gmail.com</span><br />\r\n              <span style={{ color: '#bbb' }}>info@ifta.co.in</span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n      {/* To remove the eventListner error */}\r\n      <p id=\"navbar\"></p>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Footer\\Footer.js",[],"C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Navbar\\Navbar.js",["110","111","112","113","114","115"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./Navbar.css\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Link, useLocation, useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport $ from 'jquery'\r\n\r\nconst Navbar = () => {\r\n  const [{ awards }, dispatch] = useStateValue();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const location = useLocation();\r\n  const match = useRouteMatch();\r\n  const history = useHistory();\r\n  // setTimeout(() => {\r\n  //   window.addEventListener(\"scroll\", function () {\r\n  //     let header = document.querySelector(\"#navbar\");\r\n  //     header.classList.toggle(\"sticky\", window.scrollY > 100);\r\n  //   });\r\n  // }, 500);\r\n\r\n  useEffect(() => {\r\n    console.log('isloading', isLoading)\r\n    if (!isLoading) {\r\n      console.log('location', location)\r\n      if (location.pathname === \"/voting\" && location.state !== undefined) {\r\n        // Getting the navId passed from category\r\n        const { navId } = location.state;\r\n        handleNav(navId);\r\n      }\r\n\r\n      if (match.path === \"/vote/:award\") {\r\n        const { award } = match.params;\r\n        $(document).ready(() => {\r\n          handleVoteNav(award)\r\n        })\r\n      }\r\n    }\r\n  }, [isLoading])\r\n\r\n  let closeId = '';\r\n  const handleNav = (id) => {\r\n    const dropdown = document.getElementById(id);\r\n    const allDropdown = document.getElementsByClassName(\"navbar__dropdown\");\r\n    const allNavItems = document.getElementsByClassName(\"nav__items\");\r\n    const blurdiv = document.getElementById('blur-div');\r\n    if (match.path === \"/vote/:award\") {\r\n      handleVoteNav(null, dropdown);\r\n    }\r\n\r\n    if (\r\n      dropdown?.classList.contains(\"navbar__dropdownShow\") &&\r\n      dropdown !== null\r\n    ) {\r\n      // dropdown.classList.remove(\"navbar__dropdownShow\");\r\n      // // Removing Active Class\r\n      // dropdown?.previousSibling.classList.remove(\"nav-active\");\r\n\r\n      blurdiv.style.display = \"none\";\r\n    } else {\r\n      if (closeId == id) return;\r\n      Array.from(allDropdown).forEach(function (el) {\r\n        el.classList.remove(\"navbar__dropdownShow\");\r\n      });\r\n      dropdown?.classList.add(\"navbar__dropdownShow\");\r\n      // Adding Active Class\r\n      Array.from(allNavItems).forEach(function (el) {\r\n        el.classList.remove(\"nav-active\");\r\n      });\r\n      dropdown?.focus()\r\n      blurdiv.style.display = \"block\";\r\n      dropdown?.previousSibling.classList.add(\"nav-active\");\r\n    }\r\n  };\r\n  const closeNav = (id) => {\r\n    const dropdown = document.getElementById(id);\r\n    const blurdiv = document.getElementById('blur-div');\r\n    closeId = id;\r\n    setTimeout(() => {\r\n      if (\r\n        dropdown?.classList.contains(\"navbar__dropdownShow\") &&\r\n        dropdown !== null\r\n      ) {\r\n        dropdown.classList.remove(\"navbar__dropdownShow\");\r\n        // Removing Active Class\r\n        dropdown?.previousSibling.classList.remove(\"nav-active\");\r\n        blurdiv.style.display = \"none\";\r\n      }\r\n    }, 0);\r\n    setTimeout(() => {\r\n      closeId = '';\r\n    }, 200)\r\n\r\n  }\r\n  const handleVoteNav = (id, dropdownId) => {\r\n    if (id === null) {\r\n      console.log(true);\r\n      const prev = dropdownId.previousSibling;\r\n      const allNavItems = document.getElementsByClassName(\"nav__items\");\r\n      Array.from(allNavItems).forEach(function (el) {\r\n        el.classList.remove(\"nav-active-vote\");\r\n      });\r\n      prev.classList.add(\"nav-active-vote\");\r\n    } else {\r\n      const prev = document.getElementById(id).parentElement.previousSibling;\r\n      console.log(document.getElementById(id));\r\n      const allNavItems = document.getElementsByClassName(\"nav__items\");\r\n      Array.from(allNavItems).forEach(function (el) {\r\n        el.classList.remove(\"nav-active-vote\");\r\n      });\r\n      prev.classList.add(\"nav-active-vote\");\r\n    }\r\n  };\r\n  const goToVote = (id) => { history.push(`/vote/${id}`) }\r\n  return (\r\n    <nav className=\"navbar\" id=\"navbar\">\r\n      <ul className=\"navbar__nav\">\r\n        {awards.map((nav, i) => (\r\n          <>\r\n            <li\r\n              className=\"nav__items\"\r\n              key={nav._id}\r\n              onClick={() => handleNav(nav._id)}\r\n              key={i}\r\n            >\r\n              {nav.title} <ExpandMoreIcon />\r\n            </li>\r\n\r\n            <div tabIndex={0} className=\"navbar__dropdown\" onBlur={(e) => closeNav(nav._id)} id={nav._id}>\r\n              {nav.awards?.map((award, i) => (\r\n                <Link\r\n                  id={award._id}\r\n                  onFocus={() => goToVote(award._id)}\r\n                  key={award._id}\r\n                  to={`/vote/${award._id}`}\r\n                  key={i}\r\n                  style={{\r\n                    background: `${award.answer.length > 0\r\n                        ? \"linear-gradient(to right, #233329, #63D471)\"\r\n                        : \"#000\"\r\n                      }`,\r\n                    height: '30px',\r\n                    justifyContent: 'center',\r\n                    display:'inline-block'\r\n                  }}\r\n                >\r\n                  {award.heading}\r\n                  {award.answer.length > 0 && (\r\n                    <span className=\"navbar__dropdown-voted\">\r\n                      VOTED\r\n                    </span>\r\n                  )}\r\n                </Link>\r\n              ))}\r\n              {isLoading ? setIsLoading(false) : null}\r\n            </div>\r\n          </>\r\n        ))}\r\n        <div id=\"blur-div\">\r\n\r\n        </div>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Home\\Category\\Category.js",["116"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Category.css\";\r\nimport { useStateValue } from \"../../../StateProvider\";\r\n\r\nconst Category = ({ show }) => {\r\n  const [{ awards }, _] = useStateValue();\r\n\r\n  const ConditionalLink = ({ children, to, condition, secTo }) =>{\r\n    return condition && to ? (\r\n      <Link to={to}>{children}</Link>\r\n    ) : (\r\n      <Link to={secTo}>{children}</Link>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"category\">\r\n      {awards?.map((award, index) => (\r\n        <ConditionalLink\r\n          to={{\r\n            pathname: \"/voting\",\r\n            state: {\r\n              navId: award._id,\r\n            },\r\n          }}\r\n          condition={show}\r\n          key={award._id}\r\n          secTo={`/vote/${award.awards[0]._id}`}\r\n        >\r\n          <div className={`category-${index + 1}`}>\r\n            <h3 style={{lineHeight:'1.2'}}>{ award.title.slice(0,award.title.indexOf('2020-21')-1)}<br/><span style={{fontWeight:'normal'}} class=\"year_heading\">2020-21</span></h3>\r\n            {show && (\r\n              <div>\r\n                {award.awards.map((a) => (\r\n                  <p key={a._id} style={{lineHeight:'1.25'}}>{a.heading}</p>\r\n                ))}\r\n              </div>\r\n            )}\r\n            {show && <button>Vote</button>}\r\n          </div>\r\n        </ConditionalLink>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Category;\r\n","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Home\\YTVideo\\YTVideo.js",[],"C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\MovieGrid\\MovieGrid.js",["117","118","119","120"],"import React from \"react\";\r\nimport \"./MovieGrid.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { Dialog } from \"@material-ui/core\";\r\nimport { useStateValue } from \"../../StateProvider\";\r\nimport ExpiredGrid from \"./ExpiredGrid/ExpiredGrid\";\r\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport { Modal } from '@material-ui/core'\r\nimport $ from 'jquery'\r\nimport { actionTypes } from \"../../Reducer\";\r\nimport Select from 'react-select'\r\nimport { stateList } from '../Map/Map'\r\nimport Map from '../Map/Map'\r\nimport CommentBox from './Comment';\r\nimport moment from 'moment';\r\n\r\nconst MovieGrid = ({ award }) => {\r\n  const [{ userIdentification, sessionExpired, state, awards, expiryDate }, dispatch] = useStateValue();\r\n  const match = useRouteMatch();\r\n  // OPEN OF MADALS\r\n  const [open, setOpen] = useState(false);\r\n  const [openConfirm, setOpenConfirm] = useState(false);\r\n  const [openWeblink, setOpenWeblink] = useState(false);\r\n  const [openState, setOpenState] = useState(false);\r\n  const [openResult, setOpenResult] = useState(false);\r\n  // DATA STORING\r\n  const [movies, setMovies] = useState({});\r\n  const [modalData, setModalData] = useState({});\r\n  const [sesExpired, setSesExpired] = useState(null);\r\n  const [carouselData, setCarouselData] = useState([]);\r\n  const history = useHistory();\r\n  const [comments, setComments] = useState([]);\r\n  const [enteredComment, setEnteredComment] = useState('');\r\n  const [showMap, setShowMap] = useState(false);\r\n  const [mapData, setMapdata] = useState([]);\r\n  const [enteredState, setEnteredState] = useState('');\r\n  const gridRef = React.createRef()\r\n\r\n  useEffect(() => {\r\n    fetchCarouselCategories(awards)\r\n  }, [awards]);\r\n\r\n  useEffect(() => {\r\n    if (sessionExpired === true) {\r\n      axios\r\n        .get(`/award/results?id=${award}`)\r\n        .then((res) => setSesExpired(res.data.payload));\r\n    } else if (sessionExpired === false) {\r\n      fetchNominees(userIdentification);\r\n    }\r\n  }, [award, userIdentification, sessionExpired]);\r\n\r\n  function moveArrayItemToNewIndex(arr, old_index, new_index) {\r\n    if (new_index >= arr.length) {\r\n      var k = new_index - arr.length + 1;\r\n      while (k--) {\r\n        arr.push(undefined);\r\n      }\r\n    }\r\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n    return arr;\r\n  };\r\n\r\n  const fetchNominees = (userIdentification) => {\r\n    if (userIdentification) {\r\n      const authToken = localStorage.getItem(\"authToken\").split(\" \")[1];\r\n      axios\r\n        .get(`/award/logedIn?id=${award}`, {\r\n          headers: { Authorization: `Bearer ${authToken}` },\r\n        })\r\n        .then((res) => {\r\n          let nominations = res.data.payload[0].nominations;\r\n          let index = nominations.findIndex((nomination) => {\r\n            return nomination.name === 'others'\r\n          })\r\n          if (index !== -1) {\r\n            nominations = moveArrayItemToNewIndex(nominations, index, nominations.length - 1);\r\n          }\r\n          if (res.data.payload[0].votedNomination) {\r\n            nominations.unshift(res.data.payload[0].votedNomination);\r\n            setMovies({\r\n              nominations: nominations,\r\n              heading: res.data.payload[0].heading,\r\n              voteCount: res.data.payload[0].voteCount,\r\n              votedOnce: true,\r\n              _id: res.data.payload[0]._id\r\n            });\r\n          } else {\r\n            setMovies({\r\n              nominations: res.data.payload[0].nominations,\r\n              heading: res.data.payload[0].heading,\r\n              voteCount: res.data.payload[0].voteCount,\r\n              votedOnce: false,\r\n              _id: res.data.payload[0]._id\r\n            });\r\n          }\r\n          fetchComments(res.data.payload[0]);\r\n          setMapdata(res.data.payload[0].state_data);\r\n          setShowMap(false);\r\n        })\r\n        .catch((err) => alert(err));\r\n    } else {\r\n      axios\r\n        .get(`/award?id=${award}`)\r\n        .then((res) => {\r\n          setMovies(res.data.payload[0]);\r\n          fetchComments(res.data.payload[0]);\r\n          setMapdata(res.data.payload[0].state_data);\r\n          setShowMap(false);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  };\r\n\r\n  const fetchComments = ({ comments_data }) => {\r\n    let received = comments_data;\r\n    setComments(() => {\r\n      let old_comments = [];\r\n      for (let comment of received) {\r\n        if (comment.comment) {\r\n          old_comments.push({\r\n            author: comment.user.userName,\r\n            type: 'text',\r\n            data: {\r\n              text: `@${comment.user.userName} voted for \"${comment.award.nominations.name.split('(')[0].trim()}\" \\n${comment.comment}`\r\n            }\r\n          })\r\n        }\r\n      }\r\n      return old_comments;\r\n    })\r\n  };\r\n\r\n  const fetchCarouselCategories = (arr) => {\r\n    let carouselArray = [];\r\n    arr.forEach((item) => {\r\n      item.awards.forEach((awd) => {\r\n        if (awd._id === award) {\r\n          item.awards.forEach((carousel) => carouselArray.push(carousel._id));\r\n        }\r\n      });\r\n    });\r\n    setCarouselData(carouselArray);\r\n  };\r\n  // SETS the CURRENT POSITION IN AN ARRAY\r\n  if (carouselData) {\r\n    sessionStorage.setItem(\r\n      \"currentCarouselPosition\",\r\n      carouselData.indexOf(award)\r\n    );\r\n  }\r\n\r\n  // PREV BUTTON\r\n  let current = parseInt(sessionStorage.getItem(\"currentCarouselPosition\"));\r\n  const handlePrevious = () => {\r\n    const length = carouselData.length;\r\n    current--;\r\n    if (current < 0) {\r\n      current = length - 1;\r\n    }\r\n    setShowMap(false);\r\n    history.replace(`/vote/${carouselData[current]}`);\r\n  };\r\n\r\n  // NEXT BUTTON\r\n  const handleNext = () => {\r\n    const length = carouselData.length;\r\n    current++;\r\n    if (current > length - 1) {\r\n      current = 0;\r\n    }\r\n    setShowMap(false);\r\n    history.replace(`/vote/${carouselData[current]}`);\r\n  };\r\n\r\n  const handleVote = (key) => {\r\n    if (userIdentification) {\r\n      if (!state) {\r\n        setOpenState(true);\r\n      } else {\r\n        const authToken = localStorage.getItem(\"authToken\").split(\" \")[1];\r\n        const config = {\r\n          headers: { Authorization: `Bearer ${authToken}` },\r\n        };\r\n\r\n        const bodyParameters = {\r\n          award: match.params.award,\r\n          answer: key,\r\n          comment: enteredComment,\r\n          show: '602a7e3c14367b662559c85f'\r\n        };\r\n\r\n        if (enteredComment === '') { delete bodyParameters.comment }\r\n\r\n        axios\r\n          .post(\r\n            \"/award/add-answer\",\r\n            bodyParameters,\r\n            config\r\n          )\r\n          .then((res) => {\r\n            setOpen(false);\r\n            fetchNominees(userIdentification);\r\n            dispatch({\r\n              type: actionTypes.UPDATE_AWARDS_ARRAY,\r\n              answer: res.data.payload,\r\n              award: match.params.award\r\n            })\r\n            setEnteredComment('');\r\n          })\r\n          .catch((err) => console.log(err));\r\n      }\r\n    } else {\r\n      setOpen(false);\r\n      setTimeout(() => {\r\n        setModalData({\r\n          name: \"Need to Login before voting\",\r\n        });\r\n        setOpenConfirm(true);\r\n      }, 100);\r\n    }\r\n  };\r\n\r\n  const updateSate = () => {\r\n    if (userIdentification) {\r\n\r\n      if (enteredState !== '') {\r\n        const authToken = localStorage.getItem(\"authToken\").split(\" \")[1];\r\n        const config = {\r\n          headers: { Authorization: `Bearer ${authToken}` },\r\n        };\r\n\r\n        const bodyParameters = {\r\n          state: enteredState,\r\n        };\r\n\r\n        axios\r\n          .patch(\r\n            \"/user\",\r\n            bodyParameters,\r\n            config\r\n          )\r\n          .then((res) => {\r\n            localStorage.setItem(\"state\", `${res.data.payload.state}`);\r\n            dispatch({\r\n              type: actionTypes.SET_USER_STATE,\r\n              state: res.data.payload.state\r\n            });\r\n            setOpenState(false);\r\n\r\n          })\r\n      } else {\r\n        alert('Fields can not be empty');\r\n      }\r\n    } else {\r\n      setOpenState(false);\r\n      setTimeout(() => {\r\n        setModalData({\r\n          name: \"Need to Login before voting\",\r\n        });\r\n        setOpenConfirm(true);\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  const mapToggleHandler = () => {\r\n    setShowMap(!showMap);\r\n  }\r\n\r\n  const OtherNomination = ({ movie, index }) => {\r\n    return (\r\n      <React.Fragment>\r\n        <img src={movie?.image} alt=\"img\" />\r\n        <div>\r\n          <h2>None of the above</h2>\r\n          <button\r\n            disabled={movies?.votedOnce}\r\n            className={`movieGrid__moviesBtn ${movies.votedOnce && `movieGrid__moviesBtn${index}`\r\n              }`}\r\n            onClick={() => {\r\n              if (userIdentification) {\r\n                if (state) {\r\n                  setModalData({\r\n                    name: 'Others',\r\n                    key: movie.key,\r\n                  });\r\n                  setOpen(true);\r\n                } else {\r\n                  setOpenState(true)\r\n                }\r\n              } else {\r\n                $(\"#popup1\").css({ visibility: \"visible\", opacity: \"1\" });\r\n              }\r\n\r\n            }}\r\n          >\r\n            {movies?.votedOnce && index === 0\r\n              ? \"Voted\"\r\n              : !movies?.votedOnce\r\n                ? \"Vote\"\r\n                : \"Closed\"}\r\n          </button>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  const MovieGrid = ({ userIdentification }) => {\r\n    return <React.Fragment>\r\n      <div className=\"movieGrid__container\" ref={gridRef}>\r\n        {movies.nominations?.map((movie, index) => (\r\n          <div\r\n            className={`movieGrid__movies ${movies?.votedOnce && \"movieGrid__votedOnce\"\r\n              }`} key={index}\r\n          >\r\n            {movie.name.split('(')[0] === 'others' ? <OtherNomination movie={movie} index={index} /> : <React.Fragment>\r\n              <img src={movie?.image} style={{ cursor: 'pointer' }} onClick={() => { setModalData({ name: movie.name, weblink: movie.weblink, ytlink: movie.ytlink }); setOpenWeblink(true) }} alt=\"img\" />\r\n              <PlayCircleOutlineIcon style={{ fontSize: 'large', cursor: 'pointer' }} onClick={() => { setModalData({ name: movie.name, weblink: movie.weblink, ytlink: movie.ytlink }); setOpenWeblink(true) }} />\r\n\r\n              <div>\r\n                <h2>{movie.name.split('(')[0]}<br /><span style={{ fontSize: '0.7rem', fontWeight: 'normal' }}>{movie.name.split('(')[1].replace(')', '')}</span></h2>\r\n                <button\r\n                  disabled={movies?.votedOnce}\r\n                  className={`movieGrid__moviesBtn ${movies.votedOnce && `movieGrid__moviesBtn${index}`\r\n                    }`}\r\n                  onClick={() => {\r\n                    if (userIdentification) {\r\n                      if (state) {\r\n                        setModalData({\r\n                          name: movie.name,\r\n                          key: movie.key,\r\n                        });\r\n                        setOpen(true);\r\n                      } else {\r\n                        setOpenState(true)\r\n                      }\r\n                    } else {\r\n                      $(\"#popup1\").css({ visibility: \"visible\", opacity: \"1\" });\r\n                    }\r\n\r\n                  }}\r\n                >\r\n                  {movies?.votedOnce && index == 0\r\n                    ? \"Voted\"\r\n                    : !movies?.votedOnce\r\n                      ? \"Vote\"\r\n                      : \"Closed\"}\r\n                </button>\r\n                <h6 style={{ cursor: 'pointer' }}>\r\n                  <a href={movie.weblink} target=\"_blank\" style={{ color: 'white' }}>Read More</a>\r\n                </h6>\r\n              </div>\r\n            </React.Fragment>}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </React.Fragment>\r\n  }\r\n\r\n  return sessionExpired === false ? (\r\n    <div className=\"movieGrid\">\r\n      <div className=\"movieGrid__carousel\">\r\n        <NavigateBeforeIcon onClick={handlePrevious} />\r\n        <h1>{movies.heading}</h1>\r\n        <NavigateNextIcon onClick={handleNext} />\r\n      </div>\r\n\r\n      <p className=\"movieGrid__votes\">\r\n        Number of people voted for this category: <span>{movies.voteCount || \"0\"}</span>\r\n      </p>\r\n\r\n      {movies.votedOnce ? <div style={{ color: 'white', textDecoration: 'underline', cursor: 'pointer', fontWeight: 'bold', marginBottom: '5px', display: 'inline' }} onClick={mapToggleHandler}>{showMap ? <span>Back To Nominations</span> : <span>Vote Share Per State </span>}</div> : null}   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n      {movies.votedOnce ? <div style={{ color: 'white', textDecoration: 'underline', cursor: 'pointer', fontWeight: 'bold', marginBottom: '5px', display: 'inline' }} onClick={() => { setOpenResult(true) }}> View Result </div> : null}\r\n\r\n      { showMap ? <Map mapData={mapData} /> : <MovieGrid userIdentification={userIdentification} />}\r\n\r\n      <CommentBox movies={movies} comments={comments} />\r\n\r\n      <Dialog\r\n        open={open}\r\n        onClose={() => {\r\n          setModalData({});\r\n          setOpen(false);\r\n        }}\r\n      >\r\n        <div className=\"movieGrid__modal\" style={{ height: 'max-content', width: 'max-content', padding: '20px' }}>\r\n          <h6>You Voted</h6>\r\n          <h4>\"<i>{modalData.name ? modalData.name.split('(')[0].trim() : null}</i>\"</h4>\r\n          <div style={{ height: 'max-content', width: 'max-content', padding: '10px 0 10px' }}>\r\n            <textarea type=\"text\" value={enteredComment} placeholder=\"Enter Comment\" onChange={(e) => { setEnteredComment(e.target.value) }} />\r\n          </div>\r\n          <div>\r\n            <button\r\n              onClick={() => {\r\n                setTimeout(() => setModalData({}), 500);\r\n                setOpen(false);\r\n              }}\r\n            >\r\n              Cancel\r\n          </button>\r\n            <button onClick={() => handleVote(modalData.key)}>Confirm</button>\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n\r\n      <Dialog open={openConfirm}>\r\n        <div className=\"movieGrid__modal movieGrid__modalSecond\">\r\n          <h1>\r\n            {userIdentification && \"You have voted to: \"}\r\n            <span>{modalData.name ? modalData.name.split('(')[0].trim() : null}</span>\r\n          </h1>\r\n          <button\r\n            onClick={() => {\r\n              setModalData({});\r\n              setOpenConfirm(false);\r\n            }}\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </Dialog>\r\n\r\n      <Modal open={openState} onBackdropClick={() => { setOpenState(false); }}>\r\n        <div className=\"movieGrid__modal3 movieGrid__modalSecond\" style={{\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '50%',\r\n          marginRight: '-50%',\r\n          transform: 'translate(-50%, -50%)',\r\n          color: 'black',\r\n          height: 'max-content',\r\n        }}>\r\n          <h4 style={{ color: \"white\" }}>Please enter following details</h4>\r\n          <Select options={stateList} onChange={(value) => { setEnteredState(value.value) }} placeholder='Select your region' style={{ color: 'white', marginTop: '5px' }} />\r\n          {/* <FormControl component=\"fieldset\" style={{color:'white' , marginTop:'5px'}}>\r\n            <FormLabel component=\"legend\" style={{color:'white' , marginTop:'5px'}}>Gender</FormLabel>\r\n            <RadioGroup aria-label=\"gender\" name=\"gender1\" value={gender} onChange={(e)=> setGender(e.target.value)}>\r\n              <FormControlLabel value=\"female\" control={<Radio />} label=\"Female\" />\r\n              <FormControlLabel value=\"male\" control={<Radio />} label=\"Male\" />\r\n              <FormControlLabel value=\"other\" control={<Radio />} label=\"Other\" />\r\n            </RadioGroup>\r\n          </FormControl> */}\r\n          <button onClick={updateSate}>Submit</button>\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal open={openResult} onBackdropClick={() => { setOpenResult(false); }}>\r\n        <div className=\"movieGrid__modal3 movieGrid__modalSecond\" style={{\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '50%',\r\n          marginRight: '-50%',\r\n          transform: 'translate(-50%, -50%)',\r\n          color: 'black',\r\n          height: 'max-content',\r\n          alignItems: 'center',\r\n          boxShadow: '0 0 15px 5px #d4c4c482'\r\n        }}>\r\n          <h4 style={{ color: \"white\" }}>Result will be declared on <br /> {moment(expiryDate).format(\"Do MMMM, YYYY\")}</h4>\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal open={openWeblink} onBackdropClick={() => { setModalData({}); setOpenWeblink(false); }}>\r\n        <div className=\"movieGrid__modalSecond\" style={{\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '50%',\r\n          marginRight: '-50%',\r\n          transform: 'translate(-50%, -50%)', height: '70vh', width: '80vw'\r\n        }\r\n        }>\r\n          <iframe width=\"100%\" height=\"100%\" title=\"youtbe\"\r\n            src={\"https://www.youtube.com/embed/\" + modalData.ytlink + \"?autoplay=1\"}>\r\n          </iframe>\r\n          <button\r\n            onClick={() => {\r\n              setModalData({});\r\n              setOpenWeblink(false);\r\n            }}\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  ) : (\r\n    <ExpiredGrid\r\n      sesExpired={sesExpired}\r\n      handlePrevious={handlePrevious}\r\n      handleNext={handleNext}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MovieGrid;\r\n","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\LoginModal\\LoginModal.js",["121","122"],"C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Home\\GridImages\\GridImages.js",["123"],"import React from \"react\";\r\nimport \"./GridImages.css\";\r\nimport \"./Grid.js\"\r\n\r\nfunction importAll(r) {\r\n  let images = {};\r\n  r.keys().forEach((item, index) => { images[item.replace('./', '')] = r(item); });\r\n  return images\r\n}\r\n\r\nconst bigImages = importAll(require.context('../../../images/gridLong2', false, /\\.(png|jpe?g|svg)$/));\r\nconst smallImages = importAll(require.context('../../../images/gridSmall', false, /\\.(png|jpe?g|svg)$/));\r\n\r\nlet x1 = [];\r\nlet y1 = [];\r\nlet x2 = [];\r\nlet y2 = [];\r\n\r\nlet bigKeys = Object.keys(bigImages);\r\nlet smallKeys = Object.keys(smallImages);\r\n\r\n// function chunkArray(arr, n) {\r\n//   var chunkLength = Math.max(arr.length / n, 1);\r\n//   var chunks = [];\r\n//   for (var i = 0; i < n; i++) {\r\n//     if (chunkLength * (i + 1) <= arr.length) chunks.push(arr.slice(chunkLength * i, chunkLength * (i + 1)));\r\n//   }\r\n//   return chunks;\r\n// }\r\n\r\n// let partedArray = chunkArray(bigKeys, 2);\r\n// console.log(partedArray);\r\nlet bigKeys1 = bigKeys;\r\n// let bigKeys2 = partedArray[1];\r\n// partedArray = chunkArray(smallKeys, 2);\r\n// console.log(partedArray);\r\nlet smallKeys1 = smallKeys;\r\n// let smallKeys2 = partedArray[1];\r\n\r\nlet it1 = 0;\r\n// let it2 = 0;\r\n\r\nfor (let n = 0; n < 20; n++) {\r\n  if (n === 0) {\r\n    x1.push(smallImages[smallKeys1[it1]].default, bigImages[bigKeys1[it1++]].default, bigImages[bigKeys1[it1]].default, smallImages[smallKeys1[it1++]].default, smallImages[smallKeys1[it1]].default, bigImages[bigKeys1[it1++]].default);\r\n\r\n    // x2.push(smallImages[smallKeys2[it2]].default, bigImages[bigKeys2[it2++]].default, bigImages[bigKeys2[it2++]].default, smallImages[smallKeys2[it2]].default, smallImages[smallKeys2[it2]].default, bigImages[bigKeys2[it2++]].default);\r\n  } else {\r\n    y1.push(smallImages[smallKeys1[it1]].default, bigImages[bigKeys1[it1++]].default, bigImages[bigKeys1[it1]].default, smallImages[smallKeys1[it1++]].default, smallImages[smallKeys1[it1]].default, bigImages[bigKeys1[it1++]].default);\r\n\r\n\r\n    // y2.push(smallImages[smallKeys2[it2]].default, bigImages[bigKeys2[it2++]].default, bigImages[bigKeys2[it2]].default, smallImages[smallKeys2[it2++]].default, smallImages[smallKeys2[it2]].default, bigImages[bigKeys2[it2++]].default);\r\n  }\r\n}\r\n\r\nconst GridImages = ({ secId }) => {\r\n  const renderImage = () => {\r\n    return (\r\n      <div className=\"gridImages\">\r\n        {secId ? x2.map((image, index) => (\r\n          <div\r\n            key={index}\r\n            id={`${secId ? `secGrid-${index}` : `${index}`}`}\r\n            className={`gridImagesBox gridImages__${index} `}\r\n            style={{\r\n              background: `url(\"${image}\")`,\r\n              // backgroundSize: \"cover\",\r\n            }}\r\n          ></div>\r\n        )) : x1.map((image, index) => (\r\n          <div\r\n            key={index}\r\n            id={`grid-${index}`}\r\n            className={`gridImagesBox gridImages__${index} `}\r\n            style={{\r\n              background: `url(\"${image}\")`,\r\n              // backgroundSize: \"cover\",\r\n            }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return renderImage();\r\n};\r\n\r\nexport default GridImages;\r\n","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Map\\Map.js",[],"C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Home\\GridImages\\Grid.js",["124","125"],"import $ from \"jquery\";\r\n\r\nfunction importAll(r) {\r\n    let images = {};\r\n    r.keys().forEach((item, index) => { images[item.replace('./', '')] = r(item); });\r\n    return images\r\n}\r\n\r\nconst bigImages = importAll(require.context('../../../images/gridLong2', false, /\\.(png|jpe?g|svg)$/));\r\nconst smallImages = importAll(require.context('../../../images/gridSmall', false, /\\.(png|jpe?g|svg)$/));\r\n\r\nlet x1 = [];\r\nlet y1 = [];\r\nlet x2 = [];\r\nlet y2 = [];\r\n\r\nlet bigKeys = Object.keys(bigImages);\r\nlet smallKeys = Object.keys(smallImages);\r\n\r\n// function chunkArray(arr, n) {\r\n//     var chunkLength = Math.max(arr.length / n, 1);\r\n//     var chunks = [];\r\n//     for (var i = 0; i < n; i++) {\r\n//         if (chunkLength * (i + 1) <= arr.length) chunks.push(arr.slice(chunkLength * i, chunkLength * (i + 1)));\r\n//     }\r\n//     return chunks;\r\n// }\r\n\r\n// let partedArray = chunkArray(bigKeys, 2);\r\nlet bigKeys1 = bigKeys;\r\n// let bigKeys2 = partedArray[1];\r\n// partedArray = chunkArray(smallKeys, 2);\r\n\r\nlet smallKeys1 = smallKeys;\r\n// let smallKeys2 = partedArray[1];\r\n\r\nlet it1 = 0;\r\n// let it2 = 0;\r\n\r\nfor (let n = 0; n < 20; n++) {\r\n    if (n === 0) {\r\n        x1.push(smallImages[smallKeys1[it1]].default, bigImages[bigKeys1[it1++]].default, bigImages[bigKeys1[it1]].default, smallImages[smallKeys1[it1++]].default, smallImages[smallKeys1[it1]].default, bigImages[bigKeys1[it1++]].default);\r\n        // x2.push(smallImages[smallKeys2[it2]].default, bigImages[bigKeys2[it2++]].default, bigImages[bigKeys2[it2++]].default, smallImages[smallKeys2[it2]].default, smallImages[smallKeys2[it2]].default, bigImages[bigKeys2[it2++]].default);\r\n    } else {\r\n        y1.push(smallImages[smallKeys1[it1]].default, bigImages[bigKeys1[it1++]].default, bigImages[bigKeys1[it1]].default, smallImages[smallKeys1[it1++]].default, smallImages[smallKeys1[it1]].default, bigImages[bigKeys1[it1++]].default);\r\n        // y2.push(smallImages[smallKeys2[it2]].default, bigImages[bigKeys2[it2++]].default, bigImages[bigKeys2[it2]].default, smallImages[smallKeys2[it2++]].default, smallImages[smallKeys2[it2]].default, bigImages[bigKeys2[it2++]].default);\r\n    }\r\n}\r\n\r\n$(window).on('load', function () {\r\n    let count = -1;\r\n\r\n    let newImg1 = x1.length;\r\n    // let newImg2 = x2.length;\r\n\r\n    const fadeOutt = () => {\r\n        setTimeout(function () {\r\n            count >= x1.length - 1 ? (count = 0) : count++;\r\n            $(`#grid-${count}`).fadeOut(800);\r\n            // $(`#secGrid-${count}`).fadeOut(800);\r\n            fadeIn();\r\n        }, 800);\r\n    };\r\n\r\n    const fadeIn = () => {\r\n        setTimeout(function () {\r\n            $(`#grid-${count}`).css({\r\n                background: `url('${y1[newImg1]}') no-repeat center center`,\r\n            });\r\n            // $(`#secGrid-${count}`).css({\r\n            //     background: `url('${y2[newImg2]}') no-repeat center center`,\r\n            // });\r\n\r\n            newImg1 >= y1.length - 1 ? (newImg1 = 0) : newImg1++;\r\n            // newImg2 >= y2.length - 1 ? (newImg2 = 0) : newImg2++;\r\n\r\n            $(`#grid-${count}`).fadeIn(400);\r\n            // $(`#secGrid-${count}`).fadeIn(400);\r\n            fadeOutt();\r\n        }, 700);\r\n    };\r\n\r\n    fadeOutt();\r\n})\r\n\r\n\r\n\r\n","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\Map\\LinearGradient.js",[],"C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\MovieGrid\\Comment.js",["126"],"import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport onClickOutside from \"react-onclickoutside\";\r\nimport { Launcher } from 'react-chat-window'\r\nimport $ from 'jquery';\r\nimport axios from 'axios';\r\n\r\nconst CommentBox = function ({ movies, comments }) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [messageList, setMessageList] = useState([]);\r\n    const [isFetching, setIsFetching] = useState(false);\r\n    const [page, setPage] = useState(1);\r\n\r\n    useEffect(() => {\r\n        var elements = document.querySelectorAll('.Linkify');\r\n        for (let i = 0; i < elements.length; i++) {\r\n            let element = elements[i];\r\n            let text = element.innerHTML;\r\n            let data = text.split(' voted for ');\r\n            let comment = data[1].split('\\n');\r\n            element.innerHTML = `<strong><b>${data[0]}</b></strong> voted for <span style=\"font-weight:normal ; color:grey\">${comment[0]}</span>\\n${comment[1]}`\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        setMessageList(comments);\r\n    }, [comments]);\r\n\r\n    // useEffect(() => {\r\n    //     setTimeout(() => {\r\n    //         let scrollPosition = ((messageList.length - 100) / messageList.length) * (document.querySelector('.sc-message-list').scrollHeight)\r\n    //         if (scrollPosition > 0) {\r\n    //             console.log(document.querySelector('.sc-message-list').scrollHeight,scrollPosition,messageList.length);\r\n    //             document.querySelector('.sc-message-list').scrollBy(0,0);\r\n    //             document.querySelector('.sc-message-list').scrollBy(0, parseInt(-scrollPosition));\r\n    //         }\r\n    //     }, 200)\r\n    // }, [messageList])\r\n\r\n    useEffect(() => {\r\n        if (isFetching) {\r\n            axios.get('/award/audienceComments?id=' + movies._id + '&page=' + page)\r\n                .then(\r\n                    (res) => {\r\n                        console.log(res.data.payload);\r\n                        setMessageList(() => {\r\n                            let old_comments = [];\r\n                            let received = res.data.payload;\r\n                            for (let comment of received) {\r\n                                if (comment.comment) {\r\n                                    old_comments.push({\r\n                                        author: comment.user.userName,\r\n                                        type: 'text',\r\n                                        data: {\r\n                                            text: `@${comment.user.userName} voted for \"${comment.award.nominations.name.split('(')[0].trim()}\" \\n${comment.comment}`\r\n                                        }\r\n                                    })\r\n                                }\r\n                            }\r\n                            return old_comments;\r\n                        })\r\n                        setIsFetching(false);\r\n                        setPage((page) => page + 1);\r\n                    }\r\n                ).catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n    }, [isFetching, movies])\r\n\r\n    const toggle = () => setIsOpen(!isOpen);\r\n    CommentBox.handleClickOutside = () => setIsOpen(false);\r\n\r\n\r\n    $('.sc-message-list').on('scroll', () => {\r\n        if ($('.sc-message-list').scrollTop() === 0) {\r\n            if (!isFetching) {\r\n                setIsFetching(true);\r\n            }\r\n        }\r\n    })\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Launcher\r\n                agentProfile={{\r\n                    teamName: movies.heading ? `Audience Comments - \"${movies.heading.trim()}\"` : '',\r\n                }}\r\n                messageList={messageList}\r\n                isOpen={isOpen}\r\n                handleClick={() => toggle()}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nconst clickOutsideConfig = {\r\n    handleClickOutside: () => CommentBox.handleClickOutside\r\n};\r\n\r\nexport default onClickOutside(CommentBox, clickOutsideConfig);","C:\\Users\\aannaassalam\\Documents\\Github\\IFTA\\src\\components\\MovieGrid\\ExpiredGrid\\ExpiredGrid.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":18,"column":6,"nodeType":"133","endLine":18,"endColumn":26,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":28},{"ruleId":"131","severity":1,"message":"139","line":24,"column":6,"nodeType":"133","endLine":24,"endColumn":26,"suggestions":"140"},{"ruleId":"135","severity":1,"message":"141","line":25,"column":9,"nodeType":"137","messageId":"138","endLine":25,"endColumn":16},{"ruleId":"135","severity":1,"message":"142","line":1,"column":28,"nodeType":"137","messageId":"138","endLine":1,"endColumn":36},{"ruleId":"135","severity":1,"message":"143","line":13,"column":56,"nodeType":"137","messageId":"138","endLine":13,"endColumn":64},{"ruleId":"135","severity":1,"message":"144","line":18,"column":9,"nodeType":"137","messageId":"138","endLine":18,"endColumn":17},{"ruleId":"135","severity":1,"message":"145","line":21,"column":9,"nodeType":"137","messageId":"138","endLine":21,"endColumn":17},{"ruleId":"146","severity":1,"message":"147","line":32,"column":86,"nodeType":"148","messageId":"149","endLine":32,"endColumn":93},{"ruleId":"135","severity":1,"message":"143","line":21,"column":29,"nodeType":"137","messageId":"138","endLine":21,"endColumn":37},{"ruleId":"131","severity":1,"message":"150","line":28,"column":19,"nodeType":"151","endLine":28,"endColumn":23},{"ruleId":"131","severity":1,"message":"152","line":37,"column":19,"nodeType":"151","endLine":37,"endColumn":23},{"ruleId":"153","severity":1,"message":"154","line":50,"column":11,"nodeType":"155","endLine":50,"endColumn":81},{"ruleId":"156","severity":1,"message":"157","line":105,"column":13,"nodeType":"155","messageId":"158","endLine":105,"endColumn":78,"fix":"159"},{"ruleId":"156","severity":1,"message":"157","line":106,"column":13,"nodeType":"155","messageId":"158","endLine":106,"endColumn":80,"fix":"160"},{"ruleId":"135","severity":1,"message":"161","line":5,"column":8,"nodeType":"137","messageId":"138","endLine":5,"endColumn":13},{"ruleId":"135","severity":1,"message":"143","line":10,"column":22,"nodeType":"137","messageId":"138","endLine":10,"endColumn":30},{"ruleId":"131","severity":1,"message":"162","line":39,"column":6,"nodeType":"133","endLine":39,"endColumn":17,"suggestions":"163"},{"ruleId":"164","severity":1,"message":"165","line":61,"column":19,"nodeType":"166","messageId":"149","endLine":61,"endColumn":21},{"ruleId":"167","severity":1,"message":"168","line":124,"column":15,"nodeType":"169","messageId":"170","endLine":124,"endColumn":22},{"ruleId":"167","severity":1,"message":"168","line":136,"column":19,"nodeType":"169","messageId":"170","endLine":136,"endColumn":26},{"ruleId":"135","severity":1,"message":"171","line":7,"column":22,"nodeType":"137","messageId":"138","endLine":7,"endColumn":23},{"ruleId":"131","severity":1,"message":"172","line":45,"column":6,"nodeType":"133","endLine":45,"endColumn":14,"suggestions":"173"},{"ruleId":"131","severity":1,"message":"174","line":55,"column":6,"nodeType":"133","endLine":55,"endColumn":49,"suggestions":"175"},{"ruleId":"164","severity":1,"message":"165","line":347,"column":47,"nodeType":"166","messageId":"149","endLine":347,"endColumn":49},{"ruleId":"156","severity":1,"message":"157","line":354,"column":19,"nodeType":"155","messageId":"158","endLine":354,"endColumn":86,"fix":"176"},{"ruleId":"135","severity":1,"message":"177","line":1,"column":27,"nodeType":"137","messageId":"138","endLine":1,"endColumn":36},{"ruleId":"135","severity":1,"message":"178","line":13,"column":32,"nodeType":"137","messageId":"138","endLine":13,"endColumn":40},{"ruleId":"135","severity":1,"message":"179","line":17,"column":5,"nodeType":"137","messageId":"138","endLine":17,"endColumn":7},{"ruleId":"135","severity":1,"message":"180","line":14,"column":5,"nodeType":"137","messageId":"138","endLine":14,"endColumn":7},{"ruleId":"135","severity":1,"message":"179","line":15,"column":5,"nodeType":"137","messageId":"138","endLine":15,"endColumn":7},{"ruleId":"131","severity":1,"message":"181","line":69,"column":8,"nodeType":"133","endLine":69,"endColumn":28,"suggestions":"182"},"no-native-reassign",["183"],"no-negated-in-lhs",["184"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAwards'. Either include it or remove the dependency array.","ArrayExpression",["185"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["186"],"'history' is assigned a value but never used.","'useState' is defined but never used.","'dispatch' is assigned a value but never used.","'goToHome' is assigned a value but never used.","'goToBack' is assigned a value but never used.","no-dupe-keys","Duplicate key 'padding'.","ObjectExpression","unexpected","Assignments to the 'loaded1' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","Assignments to the 'loaded2' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"187","text":"188"},{"range":"189","text":"188"},"'axios' is defined but never used.","React Hook useEffect has missing dependencies: 'handleNav', 'location', 'match.params', and 'match.path'. Either include them or remove the dependency array.",["190"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'_' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchCarouselCategories'. Either include it or remove the dependency array.",["191"],"React Hook useEffect has a missing dependency: 'fetchNominees'. Either include it or remove the dependency array.",["192"],{"range":"193","text":"188"},"'useEffect' is defined but never used.","'userName' is assigned a value but never used.","'y2' is assigned a value but never used.","'x2' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'page'. Either include it or remove the dependency array.",["194"],"no-global-assign","no-unsafe-negation",{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},[4032,4032]," rel=\"noreferrer\"",[4154,4154],{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},[11837,11837],{"desc":"205","fix":"206"},"Update the dependencies array to be: [getAwards, userIdentification]",{"range":"207","text":"208"},"Update the dependencies array to be: [dispatch, userIdentification]",{"range":"209","text":"210"},"Update the dependencies array to be: [handleNav, isLoading, location, match.params, match.path]",{"range":"211","text":"212"},"Update the dependencies array to be: [awards, fetchCarouselCategories]",{"range":"213","text":"214"},"Update the dependencies array to be: [award, userIdentification, sessionExpired, fetchNominees]",{"range":"215","text":"216"},"Update the dependencies array to be: [isFetching, movies, page]",{"range":"217","text":"218"},[592,612],"[getAwards, userIdentification]",[936,956],"[dispatch, userIdentification]",[1314,1325],"[handleNav, isLoading, location, match.params, match.path]",[1934,1942],"[awards, fetchCarouselCategories]",[2218,2261],"[award, userIdentification, sessionExpired, fetchNominees]",[3080,3100],"[isFetching, movies, page]"]